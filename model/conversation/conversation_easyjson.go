// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conversation

import (
	json "encoding/json"
	authorization "github.com/deadline-team/dtalks-bot-api/model/authorization"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA5648bb1DecodeGithubComDeadlineTeamDtalksBotApiModelConversation(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]ConversationDType, 0, 4)
					} else {
						out.Type = []ConversationDType{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ConversationDType
					v1 = ConversationDType(in.String())
					out.Type = append(out.Type, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(authorization.Avatar)
				}
				(*out.Avatar).UnmarshalEasyJSON(in)
			}
		case "visibility":
			out.Visibility = Visibility(in.String())
		case "createDate":
			if in.IsNull() {
				in.Skip()
				out.CreateDate = nil
			} else {
				if out.CreateDate == nil {
					out.CreateDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateDate).UnmarshalJSON(data))
				}
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(authorization.User)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]*authorization.User, 0, 8)
					} else {
						out.Admins = []*authorization.User{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *authorization.User
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(authorization.User)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Admins = append(out.Admins, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*authorization.User, 0, 8)
					} else {
						out.Members = []*authorization.User{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *authorization.User
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(authorization.User)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mutedMembers":
			if in.IsNull() {
				in.Skip()
				out.MutedMembers = nil
			} else {
				in.Delim('[')
				if out.MutedMembers == nil {
					if !in.IsDelim(']') {
						out.MutedMembers = make([]*authorization.User, 0, 8)
					} else {
						out.MutedMembers = []*authorization.User{}
					}
				} else {
					out.MutedMembers = (out.MutedMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *authorization.User
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(authorization.User)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.MutedMembers = append(out.MutedMembers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Message
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Message)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pinned":
			if in.IsNull() {
				in.Skip()
				out.Pinned = nil
			} else {
				in.Delim('[')
				if out.Pinned == nil {
					if !in.IsDelim(']') {
						out.Pinned = make([]*Message, 0, 8)
					} else {
						out.Pinned = []*Message{}
					}
				} else {
					out.Pinned = (out.Pinned)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *Message
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(Message)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.Pinned = append(out.Pinned, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unreadCount":
			out.UnreadCount = int(in.Int())
		case "messageCount":
			out.MessageCount = int(in.Int())
		case "unreadThread":
			if in.IsNull() {
				in.Skip()
				out.UnreadThread = nil
			} else {
				in.Delim('[')
				if out.UnreadThread == nil {
					if !in.IsDelim(']') {
						out.UnreadThread = make([]*Message, 0, 8)
					} else {
						out.UnreadThread = []*Message{}
					}
				} else {
					out.UnreadThread = (out.UnreadThread)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Message
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Message)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.UnreadThread = append(out.UnreadThread, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5648bb1EncodeGithubComDeadlineTeamDtalksBotApiModelConversation(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Type) != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Type {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Avatar != nil {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Avatar).MarshalEasyJSON(out)
	}
	if in.Visibility != "" {
		const prefix string = ",\"visibility\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Visibility))
	}
	if in.CreateDate != nil {
		const prefix string = ",\"createDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreateDate).MarshalJSON())
	}
	if in.Owner != nil {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Owner).MarshalEasyJSON(out)
	}
	if len(in.Admins) != 0 {
		const prefix string = ",\"admins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Admins {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Members {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MutedMembers) != 0 {
		const prefix string = ",\"mutedMembers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.MutedMembers {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Messages) != 0 {
		const prefix string = ",\"messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Messages {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Pinned) != 0 {
		const prefix string = ",\"pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Pinned {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.UnreadCount != 0 {
		const prefix string = ",\"unreadCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UnreadCount))
	}
	if in.MessageCount != 0 {
		const prefix string = ",\"messageCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MessageCount))
	}
	if len(in.UnreadThread) != 0 {
		const prefix string = ",\"unreadThread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.UnreadThread {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5648bb1EncodeGithubComDeadlineTeamDtalksBotApiModelConversation(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5648bb1EncodeGithubComDeadlineTeamDtalksBotApiModelConversation(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5648bb1DecodeGithubComDeadlineTeamDtalksBotApiModelConversation(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5648bb1DecodeGithubComDeadlineTeamDtalksBotApiModelConversation(l, v)
}
