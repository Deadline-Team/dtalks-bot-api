// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conversation

import (
	json "encoding/json"
	model "github.com/deadline-team/dtalks-bot-api/model"
	attachment "github.com/deadline-team/dtalks-bot-api/model/attachment"
	user "github.com/deadline-team/dtalks-bot-api/model/user"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeGithubComDeadlineTeamDtalksBotApiModelConversation(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "subType":
			out.SubType = MessageSubType(in.String())
		case "createDate":
			if in.IsNull() {
				in.Skip()
				out.CreateDate = nil
			} else {
				if out.CreateDate == nil {
					out.CreateDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateDate).UnmarshalJSON(data))
				}
			}
		case "text":
			out.Text = string(in.String())
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(user.User)
				}
				(*out.Author).UnmarshalEasyJSON(in)
			}
		case "reply":
			if in.IsNull() {
				in.Skip()
				out.Reply = nil
			} else {
				if out.Reply == nil {
					out.Reply = new(Message)
				}
				(*out.Reply).UnmarshalEasyJSON(in)
			}
		case "forward":
			if in.IsNull() {
				in.Skip()
				out.Forward = nil
			} else {
				if out.Forward == nil {
					out.Forward = new(Message)
				}
				(*out.Forward).UnmarshalEasyJSON(in)
			}
		case "thread":
			if in.IsNull() {
				in.Skip()
				out.Thread = nil
			} else {
				in.Delim('[')
				if out.Thread == nil {
					if !in.IsDelim(']') {
						out.Thread = make([]*Message, 0, 8)
					} else {
						out.Thread = []*Message{}
					}
				} else {
					out.Thread = (out.Thread)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Message
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Message)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Thread = append(out.Thread, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "threadCount":
			out.ThreadCount = int(in.Int())
		case "threadUnreadCount":
			out.ThreadUnreadCount = int(in.Int())
		case "meta":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Meta = make(model.Meta)
				} else {
					out.Meta = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.Meta)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "edited":
			out.Edited = bool(in.Bool())
		case "editDate":
			if in.IsNull() {
				in.Skip()
				out.EditDate = nil
			} else {
				if out.EditDate == nil {
					out.EditDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EditDate).UnmarshalJSON(data))
				}
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.UnreadUsers = nil
			} else {
				in.Delim('[')
				if out.UnreadUsers == nil {
					if !in.IsDelim(']') {
						out.UnreadUsers = make([]*user.User, 0, 8)
					} else {
						out.UnreadUsers = []*user.User{}
					}
				} else {
					out.UnreadUsers = (out.UnreadUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *user.User
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(user.User)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.UnreadUsers = append(out.UnreadUsers, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]*Label, 0, 8)
					} else {
						out.Labels = []*Label{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Label
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Label)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Labels = append(out.Labels, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messageReactions":
			if in.IsNull() {
				in.Skip()
				out.MessageReactions = nil
			} else {
				in.Delim('[')
				if out.MessageReactions == nil {
					if !in.IsDelim(']') {
						out.MessageReactions = make([]*MessageReaction, 0, 8)
					} else {
						out.MessageReactions = []*MessageReaction{}
					}
				} else {
					out.MessageReactions = (out.MessageReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *MessageReaction
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(MessageReaction)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.MessageReactions = append(out.MessageReactions, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*attachment.Attachment, 0, 8)
					} else {
						out.Attachments = []*attachment.Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *attachment.Attachment
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(attachment.Attachment)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]*Link, 0, 8)
					} else {
						out.Links = []*Link{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Link
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Link)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Links = append(out.Links, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			out.Read = bool(in.Bool())
		case "readDate":
			if in.IsNull() {
				in.Skip()
				out.ReadDate = nil
			} else {
				if out.ReadDate == nil {
					out.ReadDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReadDate).UnmarshalJSON(data))
				}
			}
		case "callConferenceId":
			out.CallConferenceId = string(in.String())
		case "history":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.History = make(model.Meta)
				} else {
					out.History = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 interface{}
					if m, ok := v8.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v8.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v8 = in.Interface()
					}
					(out.History)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make(MessageButtons, 0, 1)
					} else {
						out.Buttons = MessageButtons{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v9 MessageButton
					(v9).UnmarshalEasyJSON(in)
					out.Buttons = append(out.Buttons, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deleted":
			out.Deleted = bool(in.Bool())
		case "deletedDate":
			if in.IsNull() {
				in.Skip()
				out.DeletedDate = nil
			} else {
				if out.DeletedDate == nil {
					out.DeletedDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComDeadlineTeamDtalksBotApiModelConversation(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.SubType != "" {
		const prefix string = ",\"subType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubType))
	}
	if in.CreateDate != nil {
		const prefix string = ",\"createDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreateDate).MarshalJSON())
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Author).MarshalEasyJSON(out)
	}
	if in.Reply != nil {
		const prefix string = ",\"reply\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Reply).MarshalEasyJSON(out)
	}
	if in.Forward != nil {
		const prefix string = ",\"forward\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Forward).MarshalEasyJSON(out)
	}
	if len(in.Thread) != 0 {
		const prefix string = ",\"thread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Thread {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ThreadCount != 0 {
		const prefix string = ",\"threadCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThreadCount))
	}
	if in.ThreadUnreadCount != 0 {
		const prefix string = ",\"threadUnreadCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThreadUnreadCount))
	}
	if len(in.Meta) != 0 {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Meta {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if m, ok := v12Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Edited {
		const prefix string = ",\"edited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Edited))
	}
	if in.EditDate != nil {
		const prefix string = ",\"editDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.EditDate).MarshalJSON())
	}
	if len(in.UnreadUsers) != 0 {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.UnreadUsers {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					(*v14).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Labels {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					(*v16).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MessageReactions) != 0 {
		const prefix string = ",\"messageReactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.MessageReactions {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Attachments {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					(*v20).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Links {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					(*v22).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Read {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Read))
	}
	if in.ReadDate != nil {
		const prefix string = ",\"readDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ReadDate).MarshalJSON())
	}
	if in.CallConferenceId != "" {
		const prefix string = ",\"callConferenceId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CallConferenceId))
	}
	if len(in.History) != 0 {
		const prefix string = ",\"history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.History {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				if m, ok := v23Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v23Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v23Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Buttons {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Deleted {
		const prefix string = ",\"deleted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deleted))
	}
	if in.DeletedDate != nil {
		const prefix string = ",\"deletedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DeletedDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComDeadlineTeamDtalksBotApiModelConversation(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComDeadlineTeamDtalksBotApiModelConversation(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComDeadlineTeamDtalksBotApiModelConversation(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComDeadlineTeamDtalksBotApiModelConversation(l, v)
}
