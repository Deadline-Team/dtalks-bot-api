// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson97d7cd47DecodeGithubComDeadlineTeamDtalksBotApiModel(in *jlexer.Lexer, out *Avatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				out.Origin = in.Bytes()
			}
		case "s512":
			if in.IsNull() {
				in.Skip()
				out.S512 = nil
			} else {
				out.S512 = in.Bytes()
			}
		case "s256":
			if in.IsNull() {
				in.Skip()
				out.S256 = nil
			} else {
				out.S256 = in.Bytes()
			}
		case "s128":
			if in.IsNull() {
				in.Skip()
				out.S128 = nil
			} else {
				out.S128 = in.Bytes()
			}
		case "hash":
			out.Hash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97d7cd47EncodeGithubComDeadlineTeamDtalksBotApiModel(out *jwriter.Writer, in Avatar) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Origin) != 0 {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Origin)
	}
	if len(in.S512) != 0 {
		const prefix string = ",\"s512\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.S512)
	}
	if len(in.S256) != 0 {
		const prefix string = ",\"s256\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.S256)
	}
	if len(in.S128) != 0 {
		const prefix string = ",\"s128\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.S128)
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Avatar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97d7cd47EncodeGithubComDeadlineTeamDtalksBotApiModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Avatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97d7cd47EncodeGithubComDeadlineTeamDtalksBotApiModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Avatar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97d7cd47DecodeGithubComDeadlineTeamDtalksBotApiModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Avatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97d7cd47DecodeGithubComDeadlineTeamDtalksBotApiModel(l, v)
}
