// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package task

import (
	json "encoding/json"
	conversation "github.com/deadline-team/dtalks-bot-api/model/conversation"
	user "github.com/deadline-team/dtalks-bot-api/model/user"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson79a0a577DecodeGithubComDeadlineTeamDtalksBotApiModelTask(in *jlexer.Lexer, out *TaskFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IDs":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]string, 0, 4)
					} else {
						out.IDs = []string{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.IDs = append(out.IDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ConversationId":
			out.ConversationId = string(in.String())
		case "Resolved":
			out.Resolved = bool(in.Bool())
		case "Search":
			out.Search = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a0a577EncodeGithubComDeadlineTeamDtalksBotApiModelTask(out *jwriter.Writer, in TaskFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IDs\":"
		out.RawString(prefix[1:])
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.IDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ConversationId\":"
		out.RawString(prefix)
		out.String(string(in.ConversationId))
	}
	{
		const prefix string = ",\"Resolved\":"
		out.RawString(prefix)
		out.Bool(bool(in.Resolved))
	}
	{
		const prefix string = ",\"Search\":"
		out.RawString(prefix)
		out.String(string(in.Search))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a0a577EncodeGithubComDeadlineTeamDtalksBotApiModelTask(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a0a577EncodeGithubComDeadlineTeamDtalksBotApiModelTask(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a0a577DecodeGithubComDeadlineTeamDtalksBotApiModelTask(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a0a577DecodeGithubComDeadlineTeamDtalksBotApiModelTask(l, v)
}
func easyjson79a0a577DecodeGithubComDeadlineTeamDtalksBotApiModelTask1(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "number":
			out.Number = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "createDate":
			if in.IsNull() {
				in.Skip()
				out.CreateDate = nil
			} else {
				if out.CreateDate == nil {
					out.CreateDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateDate).UnmarshalJSON(data))
				}
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(user.User)
				}
				(*out.Creator).UnmarshalEasyJSON(in)
			}
		case "responsible":
			if in.IsNull() {
				in.Skip()
				out.Responsible = nil
			} else {
				if out.Responsible == nil {
					out.Responsible = new(user.User)
				}
				(*out.Responsible).UnmarshalEasyJSON(in)
			}
		case "deadline":
			if in.IsNull() {
				in.Skip()
				out.Deadline = nil
			} else {
				if out.Deadline == nil {
					out.Deadline = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Deadline).UnmarshalJSON(data))
				}
			}
		case "conversation":
			if in.IsNull() {
				in.Skip()
				out.Conversation = nil
			} else {
				if out.Conversation == nil {
					out.Conversation = new(conversation.Conversation)
				}
				(*out.Conversation).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(conversation.Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "resolved":
			out.Resolved = bool(in.Bool())
		case "resolvedDate":
			if in.IsNull() {
				in.Skip()
				out.ResolvedDate = nil
			} else {
				if out.ResolvedDate == nil {
					out.ResolvedDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ResolvedDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a0a577EncodeGithubComDeadlineTeamDtalksBotApiModelTask1(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Number != "" {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Number))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.CreateDate != nil {
		const prefix string = ",\"createDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreateDate).MarshalJSON())
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Creator).MarshalEasyJSON(out)
	}
	if in.Responsible != nil {
		const prefix string = ",\"responsible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Responsible).MarshalEasyJSON(out)
	}
	if in.Deadline != nil {
		const prefix string = ",\"deadline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Deadline).MarshalJSON())
	}
	if in.Conversation != nil {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Conversation).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Resolved {
		const prefix string = ",\"resolved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Resolved))
	}
	if in.ResolvedDate != nil {
		const prefix string = ",\"resolvedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ResolvedDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Task) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a0a577EncodeGithubComDeadlineTeamDtalksBotApiModelTask1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Task) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a0a577EncodeGithubComDeadlineTeamDtalksBotApiModelTask1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Task) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a0a577DecodeGithubComDeadlineTeamDtalksBotApiModelTask1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Task) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a0a577DecodeGithubComDeadlineTeamDtalksBotApiModelTask1(l, v)
}
